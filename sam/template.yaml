AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Avalon app backend

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref DdbTableName
        WEBSOCKET_ENDPOINT: !Sub "https://${AvalonWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  Api:
    TracingEnabled: true

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: AvalonCognitoUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: AvalonCognitoUserPoolClient
  CognitoUserPoolDomain:
    Type: String
    Default: avalon-lguo
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  DdbTableName:
    Type: String
    Default: Avalon

Resources:

  AvalonCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  AvalonCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AvalonCognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - "https://oauth.pstmn.io/v1/callback"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  AvalonCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !GetAtt AvalonCognitoUserPool.UserPoolId
      Domain: !Ref CognitoUserPoolDomain

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DdbTableName
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ### Layers ###

  ### Api ###
  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AvalonAdminApi
      StageName: !Ref StageName
      Cors: "'*'"
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AvalonCognitoUserPool.Arn
  PublicApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AvalonApi
      StageName: !Ref StageName
      Cors: "'*'"
      EndpointConfiguration:
        Type: REGIONAL

  ### WebSocket ###
  AvalonWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: AvalonWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteKey: $connect
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AvalonWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations"
      IntegrationMethod: POST
  ConnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteId: !Ref ConnectRoute
      RouteResponseKey: $default

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AvalonWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DefaultIntegration
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AvalonWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnActionFunction.Arn}/invocations"

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      ApiId: !Ref AvalonWebSocket
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt WebSocketLogGroup.Arn
        Format: "$context.identity.sourceIp - - [$context.requestTime] \"$context.eventType $context.routeKey $context.connectionId\" $context.status $context.requestId $context.error.message"

  WebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/websocket/avalon-${StageName}-${AvalonWebSocket}"
      RetentionInDays: 7

  ### Functions ###
  CreateGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.admin.create_game.lambda_handler
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref CreateGameFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - AWSLambdaBasicExecutionRole
      Events:
        CreateGame:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /admin/game
            Method: post

  CreateGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/admin/avalon-${StageName}-CreateGameFunction"
      RetentionInDays: 7

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.admin.start_game.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
      LoggingConfig:
        LogGroup: !Ref StartGameFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/POST/@connections/*'
      Events:
        StartGame:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /admin/game/{game_id}
            Method: patch
  StartGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/admin/avalon-${StageName}-StartGameFunction"
      RetentionInDays: 7

  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.join_game.lambda_handler
      Runtime: python3.12
      Timeout: 10
      LoggingConfig:
        LogGroup: !Ref JoinGameFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/POST/@connections/*'
      Events:
        JoinGame:
          Type: Api
          Properties:
            RestApiId: !Ref PublicApi
            Path: /game/{game_id}/player
            Method: post
  JoinGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-JoinGameFunction"
      RetentionInDays: 7

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.on_connect.lambda_handler
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref OnConnectFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - AWSLambdaBasicExecutionRole

  OnConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnConnectFunction"
      RetentionInDays: 7

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.on_disconnect.lambda_handler
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref OnDisconnectFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
  OnDisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnDisconnectFunction"
      RetentionInDays: 7

  OnActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: aws.lambdas.on_action.lambda_handler
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref OnActionFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
  OnActionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnActionFunction"
      RetentionInDays: 7

  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction  # Or !GetAtt ConnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/*/*"

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction  # Or !GetAtt DisconnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/*/*"

  DefaultFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnActionFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/*/*"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AdminUrl:
    Description: Admin endpoint base URL
    Value: !Sub "https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  PublicUrl:
    Description: Admin endpoint base URL
    Value: !Sub "https://${PublicApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  WebSocketURI:
    Description: WebSocket URI
    Value: !Sub "wss://${AvalonWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
