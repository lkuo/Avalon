AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Avalon app backend

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Environment:
      Variables:
        DDB_NAME: !Ref DdbTableName
        EVENT_BUS_NAME: !Ref EventBusName
        WEBSOCKET_ENDPOINT: !Sub "https://${AvalonWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
        JWT_SECRET_NAME: !Ref JwtSecretName
    Layers:
      - Ref: CommonLayer
  Api:
    TracingEnabled: true

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: AvalonCognitoUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: AvalonCognitoUserPoolClient
  CognitoUserPoolDomain:
    Type: String
    Default: avalon-lguo
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  DdbTableName:
    Type: String
    Default: Avalon
  EventBusName:
    Type: String
    Default: AvalonEventBus
  JwtSecretName:
    Type: String
    Default: avalonDevJwtSecret

Resources:

  AvalonCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  AvalonCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AvalonCognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - "https://oauth.pstmn.io/v1/callback"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  AvalonCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !GetAtt AvalonCognitoUserPool.UserPoolId
      Domain: !Ref CognitoUserPoolDomain

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DdbTableName
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ### Layers ###
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonLayer
      Description: Common packages
      ContentUri: ../layers/common/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  ### Event Bus ###
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: AvalonEventBus

  ### Api ###
  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AvalonAdminApi
      StageName: !Ref StageName
      Cors: "'*'"
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AvalonCognitoUserPool.Arn
  AvalonApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AvalonApi
      StageName: !Ref StageName
      Cors: "'*'"
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Header: IdentityHeader
              ReauthorizeEvery: 0

  ### WebSocket ###
  WebSocketLambdaAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
      AuthorizerType: REQUEST
      ApiId: !Ref AvalonWebSocket
      IdentitySource:
        - route.request.header.IdentityHeader

  AvalonWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: AvalonWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketLambdaAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AvalonWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations"
  ConnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteId: !Ref ConnectRoute
      RouteResponseKey: $default

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AvalonWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AvalonWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref AvalonWebSocket
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      DeploymentId: !Ref Deployment
      ApiId: !Ref AvalonWebSocket
      AccessLogSettings:
        DestinationArn: !GetAtt WebSocketLogGroup.Arn
        Format: "$context.identity.sourceIp - - [$context.requestTime] \"$context.eventType $context.routeKey $context.connectionId\" $context.status $context.requestId $context.error.message"

  WebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/websocket/avalon-${StageName}-${AvalonWebSocket}"
      RetentionInDays: 7

  ### Functions ###
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/authorizer/
      Handler: index.authorizerHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref AuthorizerFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Principal: apigateway.amazonaws.com
  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-AuthorizerFunction"
      RetentionInDays: 7

  CreateGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/createGame/
      Handler: index.createGameHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref CreateGameFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
      Events:
        CreateGame:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /admin/game
            Method: post
  CreateGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/admin/avalon-${StageName}-CreateGameFunction"
      RetentionInDays: 7

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/startGame/
      Handler: index.startGameHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref StartGameFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt EventBus.Arn
      Events:
        StartGame:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /admin/game/{gameId}
            Method: patch
  StartGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/admin/avalon-${StageName}-StartGameFunction"
      RetentionInDays: 7

  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/joinGame/
      Handler: index.joinGameHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref JoinGameFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - "arn:aws:secretsmanager:us-east-2:137230235550:secret:avalonDevJwtSecret-Y83b0j"
      Events:
        JoinGame:
          Type: Api
          Properties:
            RestApiId: !Ref AvalonApi
            Auth:
              Authorizer: NONE
              UsagePlan:
                CreateUsagePlan: PER_API
                Description: Usage plan for public join game API
                Quota:
                  Limit: 500
                  Period: MONTH
                Throttle:
                  BurstLimit: 50
                  RateLimit: 20
            Path: /game/{gameId}/player
            Method: post
  JoinGameFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-JoinGameFunction"
      RetentionInDays: 7

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onConnect/
      Handler: index.onConnectHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnConnectFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource:
              - !GetAtt EventBus.Arn
  OnConnectInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnConnectFunction.Arn
      Principal: apigateway.amazonaws.com
  OnConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnConnectFunction"
      RetentionInDays: 7

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onDisconnect/
      Handler: index.onDisconnectHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnDisconnectFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnDisconnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonApi}/*/*/"
  OnDisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnDisconnectFunction"
      RetentionInDays: 7

  OnPlayerConnectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onPlayerConnected/
      Handler: index.onPlayerConnectedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnPlayerConnectedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - PLAYER_CONNECTED
  OnPlayerConnectedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnPlayerConnectedFunction.Arn
      Principal: events.amazonaws.com
  OnPlayerConnectedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnPlayerConnectedFunction"
      RetentionInDays: 7

  OnGameStartedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onGameStarted/
      Handler: index.onGameStartedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnGameStartedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - GAME_STARTED
  OnGameStartedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnGameStartedFunction.Arn
      Principal: events.amazonaws.com
  OnGameStartedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnGameStartedFunction"
      RetentionInDays: 7

  StartMissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/startMission/
      Handler: index.startMissionHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref StartMissionFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt EventBus.Arn
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - GAME_STARTED
  StartMissionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-StartMissionFunction"
      RetentionInDays: 7

  OnMissionStartedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onMissionStarted/
      Handler: index.onMissionStartedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnMissionStartedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - MISSION_STARTED
  OnMissionStartedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnMissionStartedFunction.Arn
      Principal: events.amazonaws.com
  OnMissionStartedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnMissionStartedFunction"
      RetentionInDays: 7

  StartRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/startRound/
      Handler: index.startRoundHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref StartRoundFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt EventBus.Arn
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - MISSION_STARTED
  StartRoundFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-StartRoundFunction"
      RetentionInDays: 7

  OnRoundStartedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onRoundStarted/
      Handler: index.onRoundStartedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnRoundStartedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - ROUND_STARTED
  OnRoundStartedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnRoundStartedFunction.Arn
      Principal: events.amazonaws.com
  OnRoundStartedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnRoundStartedFunction"
      RetentionInDays: 7

  SubmitNominationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/submitNomination/
      Handler: index.submitNominationHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref SubmitNominationFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt EventBus.Arn
      Events:
        SubmitNomination:
          Type: Api
          Properties:
            RestApiId: !Ref AvalonApi
            Path: /game/{gameId}/mission/{missionNumber}/round/{roundNumber}
            Method: patch
  SubmitNominationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-SubmitNominationFunction"
      RetentionInDays: 7

  OnNominationSubmittedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onNominationSubmitted/
      Handler: index.onNominationSubmittedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnNominationSubmittedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - NOMINATION_SUBMITTED
  OnNominationSubmittedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnNominationSubmittedFunction.Arn
      Principal: events.amazonaws.com
  OnNominationSubmittedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnNominationSubmittedFunction"
      RetentionInDays: 7

  VoteNominationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/voteNomination/
      Handler: index.voteNominationHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref VoteNominationFunctionLogGroup
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamodbTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt EventBus.Arn
      Events:
        VoteNomination:
          Type: Api
          Properties:
            RestApiId: !Ref AvalonApi
            Path: /game/{gameId}/mission/{missionNumber}/round/{roundNumber}/vote
            Method: post
  VoteNominationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-VoteNominationFunction"
      RetentionInDays: 7

  OnNominationVotedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/onNominationVoted/
      Handler: index.onNominationVotedHandler
      Runtime: nodejs20.x
      LoggingConfig:
        LogGroup: !Ref OnNominationVotedFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AvalonWebSocket}/${StageName}/*"
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - custom.avalonApp
              detail-type:
                - NOMINATION_VOTED
  OnNominationVotedFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AvalonWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnNominationVotedFunction.Arn
      Principal: events.amazonaws.com
  OnNominationVotedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/api/avalon-${StageName}-OnNominationVotedFunction"
      RetentionInDays: 7

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BaseUrl:
    Description: API Gateway endpoint base URL
    Value: !Sub "https://${AvalonApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  WebSocketURI:
    Description: WebSocket URI
    Value: !Sub "wss://${AvalonWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
